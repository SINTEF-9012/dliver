/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.thingml.dliver.desktop;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import org.thingml.dliver.driver.Dliver;
import org.thingml.dliver.driver.DliverListener;
import org.thingml.dliver.driver.DliverMode;

/**
 *
 * @author steffend
 */
public class RecBtPauseDialog extends javax.swing.JDialog implements DliverListener, ActionListener {

    protected Dliver belt;
    protected Timer startTimer = null;
    /**
     * Creates new form EraseRecConfirmDialog
     */
    public RecBtPauseDialog(java.awt.Frame parent, boolean modal, Dliver b) {
        super(parent, modal);
        initComponents();
        this.belt = b;
        belt.addDliverListener(this);
        belt.sendBtGetStrForce("\nbuffer 2\n");  // Start record append
        int lastMode = belt.getLastMode();
        jComboBoxMode.setSelectedItem(DliverMode.fromCode(lastMode));
        // Pause BT when record is confirmed
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButtonStopRec = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxMode = new javax.swing.JComboBox(org.thingml.dliver.driver.DliverMode.values());
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Device is now recording with BT paused");

        jButtonStopRec.setText("Stop recording");
        jButtonStopRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopRecActionPerformed(evt);
            }
        });

        jLabel3.setText("Mode :");

        jComboBoxMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxModeActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(jButtonStopRec))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxMode, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(221, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jButtonStopRec)
                .addGap(197, 197, 197))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStopRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopRecActionPerformed
        belt.sendBtGetStrForce("\nbtpause 0\n");  // Stop BT pause
        // Close dialog when BT is stopped

    }//GEN-LAST:event_jButtonStopRecActionPerformed

    private void jComboBoxModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxModeActionPerformed
        if (belt != null) {
            belt.setDataModeForce(((DliverMode)jComboBoxMode.getSelectedItem()));
        }
    }//GEN-LAST:event_jComboBoxModeActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (belt != null) belt.removeDliverListener(this);
        //System.out.println("closed");
    }//GEN-LAST:event_formWindowClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStopRec;
    private javax.swing.JComboBox jComboBoxMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void cUSerialNumber(long value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void cUFWRevision(String value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void batteryStatus(int value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private enum TimerMode {TIMER_NONE, TIMER_REC_START, TIMER_BT_PAUSE_END, TIMER_REC_END};
    private TimerMode timerFunc = TimerMode.TIMER_NONE;
    
    @Override
    public void indicationDev(int value) {
            
        if (value >=57 && value <=63) { // BT status
            switch (value) {
                case 59 :  // BT pause end
                    timerFunc = TimerMode.TIMER_BT_PAUSE_END;
                    startTimer = new Timer(2000, this);
                    startTimer.setRepeats(false);
                    startTimer.start();
                    System.out.println("indicationDev - BT pause end - Starting timer");
                    jLabel4.setText("End recording - doing cleanup");
                    
                    break;
                case 60 :  // Record started
                    timerFunc = TimerMode.TIMER_REC_START;
                    startTimer = new Timer(2000, this);
                    startTimer.setRepeats(false);
                    startTimer.start();
                    System.out.println("indicationDev - Record started - Starting timer");
                    
                    setButtonColor(jButtonStopRec, new java.awt.Color(255, 51, 51));
                    break;
                case 61 : // Record ended
                    timerFunc = TimerMode.TIMER_REC_END;
                    startTimer = new Timer(2000, this);
                    startTimer.setRepeats(false);
                    startTimer.start();
                    System.out.println("indicationDev - Record ended - Starting timer");

                    setButtonColor(jButtonStopRec, null);
                    break;
                default:
                    break;     
            }
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.print("RecBtPauseDialog - got event ");
        switch (timerFunc) {
            case TIMER_REC_START:
                System.out.print("- activate btpause ");
                belt.sendBtGetStrForce("\nbtpause 1\n");  // Activate BT pause
                System.out.println("- done");
                break;
            case TIMER_BT_PAUSE_END:
                System.out.print("- stop record ");
                belt.sendBtGetStrForce("\nbuffer 1\n");   // Stop record
                belt.setDataModeForce(((DliverMode)jComboBoxMode.getSelectedItem()));
                System.out.println("- done");
                break;
            case TIMER_REC_END:
                System.out.print("- close dialog ");
                dispose();
                System.out.println("- done");
                break;
            default:
                System.out.println("- nothing done ");
                break;
        }
        timerFunc = TimerMode.TIMER_NONE;
    }
    

    private void setButtonColor( javax.swing.JButton button, java.awt.Color color) {
        if ( color == null ) {
            button.setBackground(new java.awt.Color(240, 240, 240));
            //button.setOpaque(false);
            //button.setContentAreaFilled(true);
        } else {
            button.setBackground(color);
            //button.setContentAreaFilled(false);
            //button.setOpaque(true);
        }
    }

    @Override
    public void measurementPatient(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void messageOverrun(int value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void referenceClockTime(long value, boolean seconds) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void fullClockTimeSync(long value, boolean seconds) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void heartRate(int valueHr, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void heartRateInterval(int valueHri, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void eCGData(int value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void eCGSignalQuality(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void eCGRaw(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void iCGAbs(int icgAbs, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void iCGAbsAc(int icgAbsAc, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void iCGDer(int icgAbsDer, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void ptt(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void ppgRaw(int ppgRaw, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void ppgDer(int ppgDer, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void btPutChar(int value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void gyroPitch(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void gyroRoll(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void gyroYaw(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void accLateral(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void accLongitudinal(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void accVertical(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void rawActivityLevel(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void combinedIMU(int ax, int ay, int az, int gx, int gy, int gz, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void stepCount(long step, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void quaternion(int w, int x, int y, int z, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void magnetometer(int x, int y, int z, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void skinTemperature(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void connectionLost() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void referenceClockTimeSync(int timeSyncSeqNum, long value) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void eventEpoch(int eventNum, int val, long epoch) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void playStart(long epoch) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void playStop() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
